#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS
#=================================================

app=$YNH_APP_INSTANCE_NAME

final_path=$(ynh_app_setting_get $app final_path)

#=================================================
# SPECIFIC GETTERS FOR TOML SHORT KEY
#=================================================

get__status() {
    if [ -f "/sys/class/net/tun0/operstate" ] && [ "$(cat /sys/class/net/tun0/operstate)" == "up" ]
    then
        echo "running"
    else
        echo "not running"
    fi
}

get__login_user() {
    if [ -s /etc/openvpn/keys/credentials ]
    then
        sed -n 1p /etc/openvpn/keys/credentials 
    fi
}

get__login_passphrase() {
    if [ -s /etc/openvpn/keys/credentials ]
    then
        sed -n 2p /etc/openvpn/keys/credentials 
    fi
}


#=================================================
# SPECIFIC VALIDATORS FOR TOML SHORT KEYS
#=================================================
validate__login_user() {
    [[ -n "${new[login_passphrase]}" && -z "${new[login_user]}" ]] &&
        echo 'A Username is needed when you suggest a Password'
}

validate__login_passphrase() {
    [[ -n "${new[login_user]}" && -z "${new[login_passphrase]}" ]] &&
        echo 'A Password is needed when you suggest a Username'
}

validate__crt() {
    [[ -n "${new[key]}" && -z "${new[crt]}" ]] &&
        echo "A Client Certificate is needed when you suggest a Key"
}

validate__key() {
    [[ -n "${new[crt]}" && -z "${new[key]}" ]] &&
        echo "A Key is needed when you suggest a Client Certificate"
}

# TODO
validate__ip6_net() {
    if [[ -z "${new[ip6_net]}" ]]
    then 
        echo 'The IPv6 Delegated Prefix is empty'
    fi
}

#=================================================
# SPECIFIC SETTERS FOR TOML SHORT KEYS
#=================================================
set__login_user() {
    if [ -z "${new[login_user]}" ]
    then
        echo "${new[login_user]}\n${new[login_passphrase]}" > /etc/openvpn/keys/credentials 
    else
        echo "" > /etc/openvpn/keys/credentials
    fi
}

set__login_passphrase() {
    :
}

# TODO
set__cube_file() {
    if [ -f "${new[cube_file]}" ]
    then
        cp -f $tmp_dir/client.conf.tpl /etc/openvpn/client.conf.tpl
    fi
}

#=================================================
# OVERWRITING VALIDATE STEP 
#=================================================
ynh_panel_validate() {
    set +x 
    # Overwrite form response with cube files data before validation process
    if [ -f "${new[cube_file]}" ]
    then
        declare -A settings
        settings[server_name]=""
        settings[server_port]=""
        settings[server_proto]=""
        settings[ip6_net]=""
        settings[ip4_addr]=""
        settings[login_user]=""
        settings[login_passphrase]=""
        settings[dns0]=""
        settings[dns1]=""
        settings[crt_server_ca]="file"
        settings[crt_client]="file"
        settings[crt_client_key]="file"
        settings[crt_client_ta]="file"

        tmp_dir=$(dirname "${new[cube_file]}")
        for setting_name in "${!settings[@]}"
        do
            setting_value="$(jq --raw-output ".$setting_name" "${new[cube_file]}")"
            if [[ "$setting_value" == "null" ]]
            then
                setting_value=''
            # Save file in tmp dir
            elif [[ "${settings[$setting_name]}" == "file" ]]
            then
                echo "${settings[$setting_name]}" | sed 's/|/\n/g' > $tmp_dir/$setting_name
                setting_value="$tmp_dir/$setting_name"
            fi

            new[$setting_name]="$setting_value"
        done
        
        # Build specific OVPN template
        cp -f /etc/openvpn/client.conf.tpl.restore $tmp_dir/client.conf.tpl
        # Remove some lines
        for rm_regex in "$(jq --raw-output '.openvpn_rm[]' "${new[cube_file]}")"
        do
            if [ ! -z "${rm_regex}" ] ; then
                sed -i "/$rm_regex/di" $tmp_dir/client.conf.tpl
            fi
        done

        # Add some other lines
        echo "# Custom" >> $tmp_dir/client.conf.tpl
        jq --raw-output ".openvpn_add[]" "${new[cube_file]}" >> $tmp_dir/client.conf.tpl
    fi

    set -x
    _ynh_panel_validate
}

#=================================================
# OVERWRITING APPLY STEP 
#=================================================
ynh_panel_apply() {
    
    # Stop vpn client
    touch /tmp/.ynh-vpnclient-stopped
    systemctl stop ynh-vpnclient

    _ynh_panel_apply

    # Start vpn client
    systemctl start ynh-vpnclient
    rm -f /tmp/.ynh-vpnclient-stopped

}

ynh_panel_run $1
